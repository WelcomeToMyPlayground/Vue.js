1. 데이터 바인딩
- JS 데이터를 HTML에 꽂아넣는 문법

{{데이터바인딩}} 하는 이유
- HTML에 하드코딩 해놓으면 나중에 변경이 어려움
- Vue가 제공하는 실시간 자동 렌더링 기능을 이용하기 위함
- Vue는 data를 변경하면 data와 관련된 HTML에도 실시간으로 반영됨
- {{ }} 이거 써야 실시간 자동 렌더링됨
- 자주 변할 거 같은 데이터들은 밑에서 data()로 보관하고 HTML에 {{꽂아 넣기}}

- HTML 속성도 데이터바인딩 가능 
  :속성="데이터이름" (속성 왼쪽에 콜론 붙이기)
  :style="스타일"

-----------------------------------------------------------------

Vue의 HTML 반복문

<태그 v-for="작명 in 몇회">

-> 예시 <a v-for="작명 in 3" :key="작명">{{작명}}</a>

- :key=" "의 용도
-> 반복문 쓸 때 :key 안 쓰면 에러남
-> 반복문 돌린 요소를 컴퓨터가 구분하기 위해 사용

특징

- vue 문법 쓰면 비슷한 HTML들 만들 때 코드 한줄 가능 

- vue 반복문은 array/object 집어넣기 가능
- 1. 그럼 자료 안의 데이터 갯수만큼 반복됨
- 2. 작명한 변수는 데이터 안의 자료가 됨 

- 변수 작명 2개까지 가능 

 <a v-for="(a,i) in 메뉴들" :key="i">{{ a }}</a>    // Home Shop About
 <a v-for="(a,i) in 메뉴들" :key="i">{{ i }}</a>    // 0 1 2

 -> 왼쪽 변수 a는 array 내의 데이터
 -> 오른쪽 변수는 1씩 증가하는 정수 



-----------------------------------------------------------------

4강 (이벤트 핸들러)

- 버튼 눌렀을 때 자바스크립트 실행하려면 전통 방식은 onclick=""
- Vue 방식은 v-on:click=""
- 축약형 @click=""


// 버튼을 누르면 신고 수 1 증가시키기

쌩 자바스크립트 스타일
1. 버튼 누르면 숫자 찾아서 +1
2. 그리고 +1 된걸 HTML에 반영

Vue 스타일
1. 버튼 누르면 관련된 데이터만 +1
(Vue는 데이터 변하면 HTML에 바로 반영됨)


// 여러가지 이벤트 사용 가능

1. @mouseover=""  : 이 버튼에 마우스를 갖다 댔을 때 안에 있는 자바스크립트 실행

<button @mouseover="신고수++">허위매물신고</button> <span> 신고 수 : {{ 신고수 }}</span>

-> 마우스 갖다 댈 때마다 신고 수가 증가 

2. @ 치고 ctrl+space바 누르면 자동완성 되면서 사용 가능한 이벤트들 확인 가능 

3. 안에 직접 쓰는 코드 내용이 너무 길어진다 싶으면 function으로 축약해서 함수명 쓰기 
   (html 코드 안에선 함수명() 이렇게 쓰는게 아니라 함수명만 적음)


// 자바스크립트에서 함수 쓰는 이유

긴 코드를 짧게 한 단어로 축약하고 싶어서 쓰는 것


// Vue에서 함수 만들고 싶으면

methods: {} 안에 

-> methods: {함수(){}} 이렇게 만들기


// Vue 안에서 함수 만들 때 주의사항

- 함수 안에서 데이터 쓸 땐 this.데이터명

 methods: {
    increase(){
      this.신고수 += 1;
    }
  },


  -----------------------------------------------------------------

  5강 (모달창 만들기)




1. 데이터 바인딩
- JS 데이터를 HTML에 꽂아넣는 문법

{{데이터바인딩}} 하는 이유
- HTML에 하드코딩 해놓으면 나중에 변경이 어려움
- Vue가 제공하는 실시간 자동 렌더링 기능을 이용하기 위함
- Vue는 data를 변경하면 data와 관련된 HTML에도 실시간으로 반영됨
- {{ }} 이거 써야 실시간 자동 렌더링됨
- 자주 변할 거 같은 데이터들은 밑에서 data()로 보관하고 HTML에 {{꽂아 넣기}}

- HTML 속성도 데이터바인딩 가능 
  :속성="데이터이름" (속성 왼쪽에 콜론 붙이기)
  :style="스타일"

-----------------------------------------------------------------

Vue의 HTML 반복문

<태그 v-for="작명 in 몇회">

-> 예시 <a v-for="작명 in 3" :key="작명">{{작명}}</a>

- :key=" "의 용도
-> 반복문 쓸 때 :key 안 쓰면 에러남
-> 반복문 돌린 요소를 컴퓨터가 구분하기 위해 사용

 <a v-for="list in 메뉴들" :key="list">{{list}}</a>

-> 자료안의 데이터 갯수만큼 반복됨
-> 작명한 변수(list)는 데이터 안의 자료가 됨


특징

- vue 문법 쓰면 비슷한 HTML들 만들 때 코드 한줄 가능 

- vue 반복문은 array/object 집어넣기 가능
- 1. 그럼 자료 안의 데이터 갯수만큼 반복됨
- 2. 작명한 변수는 데이터 안의 자료가 됨 

- 변수 작명 2개까지 가능 

 <a v-for="(a,i) in 메뉴들" :key="i">{{ a }}</a>    // Home Shop About
 <a v-for="(a,i) in 메뉴들" :key="i">{{ i }}</a>    // 0 1 2

 -> 왼쪽 변수 a는 array 내의 데이터
 -> 오른쪽 변수는 1씩 증가하는 정수 


예시

  <div v-for="productList in products" :key="productList">
    <h4>{{ productList }}</h4>
  </div>

-----------------------------------------------------------------

4강 (이벤트 핸들러)

- 버튼 눌렀을 때 자바스크립트 실행하려면 전통 방식은 onclick=""
- Vue 방식은 v-on:click=""
- 축약형 @click=""


// 버튼을 누르면 신고 수 1 증가시키기

쌩 자바스크립트 스타일
1. 버튼 누르면 숫자 찾아서 +1
2. 그리고 +1 된걸 HTML에 반영

Vue 스타일
1. 버튼 누르면 관련된 데이터만 +1
(Vue는 데이터 변하면 HTML에 바로 반영됨)

-----------------------------------------------------------------

// 여러가지 이벤트 사용 가능

1. @mouseover=""  : 이 버튼에 마우스를 갖다 댔을 때 안에 있는 자바스크립트 실행

<button @mouseover="신고수++">허위매물신고</button> <span> 신고 수 : {{ 신고수 }}</span>

-> 마우스 갖다 댈 때마다 신고 수가 증가 

2. @ 치고 ctrl+space바 누르면 자동완성 되면서 사용 가능한 이벤트들 확인 가능 

3. 안에 직접 쓰는 코드 내용이 너무 길어진다 싶으면 function으로 축약해서 함수명 쓰기 
   (html 코드 안에선 함수명() 이렇게 쓰는게 아니라 함수명만 적음)


// 자바스크립트에서 함수 쓰는 이유

긴 코드를 짧게 한 단어로 축약하고 싶어서 쓰는 것

-----------------------------------------------------------------

// Vue에서 함수 만들고 싶으면

methods: {} 안에 

-> methods: {함수(){}} 이렇게 만들기

-> 함수 만드는 자리는 data(){} 뒤에
-> 함수 만들 땐 함수이름(){} 이게 끝

-----------------------------------------------------------------

// Vue 안에서 함수 만들 때 주의사항!!

- 데이터를 가져다 쓰고싶으면 꼭 this.데이터이름 이라고 사용해야 함
- this는 그냥 위에 있는 데이터와 함수를 담은 큰 object 라고 생각하면 됨 

 methods: {
    increase(){
      this.신고수 += 1;
    }
  },

-----------------------------------------------------------------

<div>
  <h4>{{products[0]}}</h4>
  <p> 50 만원</p>
  <button @click="increase()">신고</button>
  <span>신고수 : {{ 신고수 }}</span>
</div>

-> 함수() 이렇게 해도 되고, 함수 이름만 써도 됨. @click="increase"
-> 함수는 한글로 작명하면 잘 안될 수 있음!

v-on:click
@click

-----------------------------------------------------------------

5강

// Vue 개발 팁

- 데이터 어떻게 만들지 먼저 생각

// <img> 넣는법

- 절대경로는 그냥 넣기 <img src="http:// ~~">
- 상대경로는..

-> 같은 폴더 안에 있는 이미지를 넣고 싶다면 
-> src에 있는 거 가져올 때 경로는 ./ 부터!!
-> ./ 가 현재 경로 


// 이미지 넣는법 다시 

이미지를 src 폴더 안에 아무데나 넣으시고

<img src="./경로"> 

-----------------------------------------------------------------

// Vue에서 모달창 만들기

동적인 UI 만드는 step

0. HTML CSS로 디자인 해두기 (기본)
1. UI의 현재 상태를 데이터로 저장해둠 (true/false 또는 1/0)
2. 데이터에 따라 UI가 어떻게 보일지 작성 (v-if 사용해도 되고) 

-----------------------------------------------------------------

- vue-router 설치하면 다른 페이지 만드는 것도 가능한데 -> 이건 나중에 배울 것

-----------------------------------------------------------------


// 데이터 저장 공간 (리액트에서는 state)

export default { 
  name: 'App',
  data(){
    return {
      price1 : 50,
      price2 : 60,
      price3 : 70,
      prices : [50,60,70],
      메뉴들 : ['Home','Shop','About'],
      products : ['역삼동원룸', '천호동원룸', '마포구원룸'],
      신고수 : [0,0,0],
      모달창열렸니 : false,
      // 자료이름 : 자료 내용
    }
  },
  
  -> 이 데이터 저장 공간을 리액트에서는 state 라고 부름 
     (데이터들을 담는 공간이기도 한데, UI의 현재 상태를 저장하는 공간이기도 함)

-----------------------------------------------------------------

v-if="조건식"

-> HTML 태그 안에 v-if="조건식"을 사용하면 조건식이 참일 때만 HTML을 보여줌
-> 간단한 Vue 문법인데 이거 쓰면 2번을 구현가능합니다.

-> true를 전달해서 보이게하거나, false를 전달해서 안보이게 하거나 

@click="modal = true"

-----------------------------------------------------------------

import/export 문법 쓰는법

1. export default 변수명                   (내보내기)
2. import 작명 from 그파일경로            (가져오기)


- export default는 파일 맨마지막에 딱 한번 사용 가능
- import시 작명은 자유롭게 가능

(oneroom.js)
var apple = 10;
export default apple

(App.vue)
import 어쩌구 from './oneroom.js파일경로'

-----------------------------------------------------------------

export 해야할게 많으면 export{} 문법을 사용함

- export는 원하는 만큼 사용 가능
- 이걸 import 시엔 작명이 불가능하고 export 했던 변수명 그대로 적어야 함


(oneroom.js)
var apple = 10;
var apple2 = 100;
export { apple, apple2 }

(App.vue)
import { apple, apple2 } from './oneroom.js파일경로'

-----------------------------------------------------------------

HTML 태그 안 속성 데이터 바인딩은 :src 또는 :style 같이 :어쩌구
-> 아래에 data로 저장되어있는걸 사용하는 경우

HTML 태그 사이 내용 데이터 바인딩은 {{ 어쩌구 }}
-> 내용물

-----------------------------------------------------------------

시작이 { 이거면 무조건 object 자료!

-----------------------------------------------------------------

데이터 바인딩

-> data() 란에다가 보관한 후 원하는 html 코드에 {{데이터바인딩}} 하면 됨

-----------------------------------------------------------------

동적인 UI 만드는법

1. UI 상태 저장해둘 데이터 만들기
2. 데이터에 따라서 HTML이 어떻게 보일지 작성 
3. 마무리는 @click 등으로 UI 조작하는 버튼 만들기 (스위치라고 생각)

-----------------------------------------------------------------

<div v-if="1 == 2">
    if 안녕하세요
  </div>
  <div v-else-if="1 == 1">
    else if 안녕하세요
  </div>
  <div v-else>
    else 안녕하세요
</div>

-----------------------------------------------------------------

Component
: 긴 HTML을 한 단어로 줄일 수 있는 문법

원하는 html을 한 단어로 줄이고 싶으면

-> .vue 파일 하나 만들어서 html 작성하고
-> 원하는 곳에서 그 파일 import/등록/사용

-----------------------------------------------------------------

축약해둔 컴포넌트 쓰는법 (import) !!

1. vue 파일 import 해오고
2. Components:{}에 등록하고
3. 쓰기


import Discount from './Discount.vue 경로'          // import

export default {
  data() {

  },
  components : {
    Discount,                                      // 등록
  }
}


-> 등록까지 했으면 이제 <template> 안에서 자유롭게 가져다 쓸 수 있음

-----------------------------------------------------------------

.vue 파일의 형식

(예를 들면 Discount.vue)

<template>
  축약할 HTML~~
</template>

<script>
export default {
  name : '작명',

}
</script>

<style>
  넣을 스타일 
</style>

-> 이 vue 파일을 하나의 컴포넌트라고 부름

-----------------------------------------------------------------

**

(업데이트사항) 이제 컴포넌트.vue 이름은 2단어 이상으로 작명해야함
안그러면 에러로 잡아줌 

DiscountBanner.vue 이런 식으로 2단어로 작명하기

싫으면 package.json 파일 열어서 "rules" 라는 항목에

"rules": {
   "vue/multi-word-component-names": "off"
} 

한줄 추가하고 미리보기 껐다가 다시 띄우면 됨

-----------------------------------------------------------------

* 모든걸 다 컴포넌트로 만들지 말고 반복적으로 쓰일 부분만 컴포넌트화 권장

- 컴포넌트 사용시 코드가 필연적으로 복잡해짐
- 컴포넌트 만들면 데이터바인딩할 때 귀찮은 일이 생길 수 있음


{{데이터바인딩}}은 밑에 데이터가 있어야 가능함

- 데이터는 한 곳에 보관하고 필요하면 가져다 씀
-> 갖다 쓰는 문법을 props 라고 함

-----------------------------------------------------------------
 
부모/자식 컴포넌트

예시.
 
App.vue -> 부모 컴포넌트
Modal.vue -> 자식 컴포넌트 (App.vue 파일 안에서 <Modal/> 이러고 쓰임)


- 자식 컴포넌트가 부모가 갖고 있는 데이터를 쓰려면 
  props로 데이터를 전송해야 쓸 수 있음 

-----------------------------------------------------------------

* props로 자식에게 데이터 보내는법

1. (부모페이지에서) 밑에 데이터 골라서 보내기
   <자식 :작명한 데이터이름="실제 데이터이름">        // 이름 맞추는게 일반적

   <Modal :원룸들="원룸들" :누른거="누른거" :modal="modal"/>

2. (자식페이지에서) props로 받은거 등록
   props: {받아온 데이터이름 : 자료형이름}

   - 자료형은 Array인지, Object인지, 문자면 String, 숫자면 Number
   - true/false라면 Boolean
   -> 받아온 데이터의 자료형 이름을 대문자로 

3. 갖다 쓰기 (html에서 자유롭게 사용)

-----------------------------------------------------------------

* props

- props는 read-only임. 받아온 거 수정하면 큰일남 


->  <button v-on:click="modal = false">닫기</button> 여기서
    "modal = false" 같이 값을 재할당 하는게 불가 

-----------------------------------------------------------------

정리

- 부모 데이터를 자식이 쓰고싶을 때 쓰는게 props 문법
- props 전송하려면 3-step (데이터 보내고, 등록하고, 쓰기)
- props 받아온건 read-only 

-----------------------------------------------------------------

데이터 만들 땐
데이터 사용하는 곳들 최상위 컴포넌트에 만들기

-----------------------------------------------------------------

콜론 : 이거 역할은 2개. 데이터바인딩 혹은 props 전송임

----------------------------------------------------------------- 

props 보낼 때 다양한 자료형 입력 가능

1. 작명="문자자료"
->  <Discount 데이터이름="12345"/>   // 문자

2. :작명="숫자자료"
->  <Discount :데이터이름="12345"/>   // 숫자

-----------------------------------------------------------------

$어쩌구는 Vue만의 특별한 변수 


-> 자식 컴포넌트가 부모에 있는 데이터를 변경하고 싶으면 
   직접 변경은 불가하고 부모에게 변경해달라는 메세지 보낼 수 있음 (custom event 문법으로)

1. 부모에게 메세지 보낼 땐 $emit('작명',데이터)
   -> 메세지와 함께 데이터도 보낼 수 있음
   -> @click="$emit('openModal', 원룸.id)"

2. 부모가 메세지 수신할 땐 <자식컴포넌트이름 @작명한거="">
   -> <Card @openModal="modal = true; 누른거 = $event" />
   -> 메세지 수신하면 데이터 변경하겠다고 작성해놓은 코드 

3. 자식이 보낸 데이터는 $event 변수에 담겨있음 